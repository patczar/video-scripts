#!/bin/bash

# (c) Patryk Czarnik
# Distributed under MIT License. See LICENCE file in the root directory for details.

# The main video processing script. I use it as a basic tools for postprocessing of my dash cam videos.

usage="vid-process [options]
where options are:
  -h  -- prints usage message
  -o output_file -- sets output file
  -i file -- input specification file, in the format of ffmpeg concat demuxer
  -d codec -- which codec to use. 4 means h264, 5 means h265
  -q quality -- passed as CRF option to ffmpeg (\"constant quality\", variable bitrate depending on image details, reasonable values for me are between 20 (high) and 30 (low))
  -Q N -- encoding quality / encoding time tradeoff; supported values are from 1 to 5, the higher the slower = better quality. Default 3.
  -x N -- drop frames to increase speed;
      every Nth frame is kept, the rest is lost.
      If the framerate is not changed, it means N time increase of the video speed.
      If fps is changed (-f option), the speed depends on those 2 factors.
  -f fps -- the result frame rate (frames per second).
  -e eq_spec -- specifies the eq filter; if -g is also given, gamma spec is appended to this one
  -g gamma -- applies gamma correction (e.g. 1.2); default: no correction;
      gamma_strength variable has an impact on this
  -u spec -- specifies the curves filter (see ffmpeg docs)
  -U points -- specifies the list of points form the master channel of curves filter; must be given as a single argument (in quotes etc.)
  -n N -- apply denoise filter with the given strength
<<<<<<< HEAD
  -F file -- additional filters spec to be read from file
  -J -- enables \"road junction\" image to be referenced in -F option
=======
  -A -B -C -D -E -F -G file -- additional filters spec to be read from file.
      The file should contain a fragment of command-line filter specification, without a newline.
      The letter specifies the place in filters chain where the given filter should be put:
      * A - at the beginning of the chain, to the original video
      then unneeded frames are dropped and the output speed is set
      * B - after frame dropping, before format conversion
      then comes conversion to internal format and cropping of the image area
      * C - between cropping and scaling (applied to unscaled video)
      then the video is scaled to appropriate result size (without pads, if any)
      * D - after scaling the video, before any color enhancements
      then comes denoise and color enhancement filters
      * E - after color processing, before adding pads; the best place to add blurring
      then pads are added (if any)
      * F - before converting to output format; the best place to add text
      then comes conversion to the output format
      * G - applied at the end of the chain, on the video in the output format
  -I -- enables \"road junction\" etc. images to be referenced from filters in -F option
>>>>>>> da9a4e1664613c42d7b5d51b330eb69b8185e919
  -s input_size -- Ambarella formats: a1920 a2304 a2560
                   Ferguson formats: f1920 f1280
  -S output_size -- s2 (960:480) m2 (1280:640)
                    l2 (1440:720) x2 (1920:960)
                    m7 (1280:560) x7 (1920:840)
                    m9 (1280:720) x9 (1920:1080)
                    y480 y720 y1080 (YouTube without text bar)
                    t480 t720 t1080 (YouTube with text bar)
"

# Default values
Q=4
crf="23"
nice=6

# Other settings
private_codec=libx265
#private_codec=libx264
yt_codec="libx264 -profile:v high -bf 2 -g 15 -coder ac"

if [ -z "$gamma_strength" ]
then
    gamma_strength=0.67
fi

<<<<<<< HEAD
while getopts "ho:i:d:x:f:e:g:u:U:F:Js:S:q:Q:B:n:" opt; do
=======
images_dir="/home/patryk/projects/video-scripts/git/img"
images="$images_dir/junc.png $images_dir/exit.png $images_dir/mop.png $images_dir/ppo.png $images_dir/logo_080.png"

declare -A additional_filters


while getopts "ho:i:d:x:f:e:g:u:U:Is:S:q:Q:n:A:B:C:D:E:F:G:" opt; do
>>>>>>> da9a4e1664613c42d7b5d51b330eb69b8185e919
  case "$opt" in
  h|\?)
     echo "$usage"
     exit 1
     ;;
  o) output="$OPTARG"
     ;;
  i) input="$OPTARG"
     ;;
  d) codec="$OPTARG"
     ;;
  x) speed="$OPTARG"
     ;;
  f) fps="$OPTARG"
     ;;
  g) gamma="$OPTARG"
     ;;
  e) eq="$OPTARG"
     ;;
  u) curves="$OPTARG"
     ;;
  U) curves="m=$OPTARG"
     ;;
<<<<<<< HEAD
  F) filter_file="$OPTARG"
=======
  I) load_images=1
>>>>>>> da9a4e1664613c42d7b5d51b330eb69b8185e919
     ;;
  J) junction=1
     ;;
  s) isize="$OPTARG"
     ;;
  S) osize="$OPTARG"
     ;;
  q) crf="$OPTARG"
     ;;
  Q) Q="$OPTARG"
     ;;
  n) dn="$OPTARG"
     ;;
  A|B|C|D|E|F|G) filter_file="$OPTARG"
    if [ -r "$filter_file" ]
    then
      additional_filters[$opt]="${additional_filters[$opt]},`cat $filter_file`"
    fi
     ;;
  esac
done

shift $(($OPTIND - 1))

if [ -z "$output" ]
then
output="out.mp4"
fi

case "$isize@$osize" in
  (f1920@x2)
    cam=ferguson
    crop="w=1920:h=960:x=0:y=64"
    scale=
  ;;
  (f1920@l2)
    cam=ferguson
    crop="w=1824:h=912:x=48:y=112"
    scale="w=1440:h=720"
  ;;
  (f1920@m2)
    cam=ferguson
    crop="w=1792:h=896:x=64:y=128"
    scale="w=1280:h=640"
  ;;
  (f1280@m2)
    cam=ferguson
    crop="w=1280:h=640:x=0:y=36"
    scale=
  ;;
  (f1920@s2)
    cam=ferguson
    crop="w=1728:h=864:x=96:y=160"
    scale="w=960:h=480"
  ;;
  (f1280@s2)
    cam=ferguson
    crop="w=1200:h=600:x=40:y=72"
    scale="w=960:h=480"
  ;;
  (f1920@m9)
    cam=ferguson
    crop="w=1664:h=936:x=128:y=88"
    scale="w=1280:h=720"
  ;;
  (f1280@m9)
    cam=ferguson
    crop=
    scale=
  ;;
  (f1920@y720)
    cam=ferguson
    crop="w=1664:h=936:x=128:y=88"
    scale="w=1280:h=720"
    youtube=1
  ;;
  (f1280@y720)
    cam=ferguson
    crop=
    scale=
    youtube=1
  ;;
  (f1920@t720)
    cam=ferguson
    crop="w=1920:h=996:x=0:y=24"
    scale="w=1280:h=664"
    padding="w=1280:h=720:y=0"
    youtube=1
  ;;
  (f1280@t720)
    cam=ferguson
    crop="w=1280:h=664:x=0:y=16"
    scale=
    padding="w=1280:h=720:y=0"
    youtube=1
  ;;
  (a2304@x2)
    cam=a7810
    crop="w=2304:h=1152:x=0:y=64"
    scale="w=1920:h=960"
  ;;
  (a2560@x7)
    cam=a7810
    crop="w=2432:h=1064:y=0"
    scale="w=1920:h=840"
  ;;
  (a2560@y720)
    cam=a7810
    crop="w=2368:h=1080:x=96:y=0"
    padding="w=2368:h=1332:y=0"
    scale="w=1280:h=720"
    youtube=1
  ;;
  (*)
    echo "Unsupported input / output size combination"
    exit 1
esac

pts=PTS
if [ -n "$fps" ]
then
  tb="1/$fps"
  pts="N"
fi
if [ -n "$speed" ]
then
  pts="${pts}/${speed}"
fi

case $Q in
  (1) preset=veryfast
    sws_flags=fast_bilinear
    internal_format=yuv420p
  ;;
  (2) preset=fast
    sws_flags=bilinear
    internal_format=yuv444p
  ;;
  (3) preset=medium
    sws_flags=bicublin
    internal_format=yuv444p10le
  ;;
  (4) preset=slow
    sws_flags=lanczos
    internal_format=yuv444p12le
  ;;
  (5) preset=slower
    sws_flags=lanczos
    internal_format=yuv444p16le
  ;;
esac

case "$codec" in
(yt)
  codec=$yt_codec
  format=yuv420p
;;
(4|h264)
  codec="libx264"
  format=yuv420p
;;
(5|h265)
  codec="libx265"
  format=yuv444p
;;
("")
  if [ "$youtube" = "1" ]
  then
    codec=$yt_codec
  else
    codec=$private_codec
  fi
esac
codec="$codec -preset $preset -crf $crf"
if [ -n "$maxbitrate" ]
then
  codec="$codec -maxrate $maxbitrate -bufsize 20MB"
fi

export FFREPORT="file=${output%.*}.log:level=32"

filter=null
filter="${filter}${additional_filters[A]}"

if [ -n "$tb" ]
then
filter="$filter,settb=$tb"
fi

if [ -n "$pts" ]
then
filter="$filter,setpts=$pts"
fi

if [ -n "$speed" ]
then
filter="$filter,framestep=$speed"
fi

filter="${filter}${additional_filters[B]}"

filter="${filter},format=$internal_format"

if [ -n "$crop" ]
then
filter="$filter,crop=$crop"
fi

filter="${filter}${additional_filters[C]}"

if [ -n "$scale" ]
then
filter="$filter,scale=$scale:flags=$sws_flags"
fi

filter="${filter}${additional_filters[D]}"

if [ -n "$dn" -a "$dn" != 0 ]
then
filter="$filter,hqdn3d=$dn"
fi

if [ -n "$curves" ]
then
filter="$filter,curves=$curves"
fi

if [ -n "$eq" -a -n "$gamma" ]
then
eq="${eq}:"
fi

if [ -n "$gamma" ]
then
eq="${eq}gamma=$gamma:gamma_weight=$gamma_strength"
fi

if [ -n "$eq" ]
then
filter="$filter,eq=$eq"
fi

filter="${filter}${additional_filters[E]}"

if [ -n "$padding" ]
then
filter="$filter,pad=$padding"
fi


filter="${filter}${additional_filters[F]}"

if [ -n "$format" ]
then
filter="$filter,format=$format"
fi

<<<<<<< HEAD
case "$codec" in
(yt)
  codec=$yt_codec
;;
(4|h264)
  codec="libx264 -profile:v high"
;;
(5|h265)
  codec="libx265"
;;
("")
  if [ "$youtube" = "1" ]
  then
    codec=$yt_codec
  else
    codec=$private_codec
  fi
esac
codec="$codec -preset $preset -crf $crf"
if [ -n "$maxbitrate" ]
then
  codec="$codec -maxrate $maxbitrate -bufsize 20MB"
fi

maybe_junction=
if [ -n "$junction" ]
then
  maybe_junction=" -f image2 -framerate $fps -i kreuz_cyan_352x56.png"
fi

echo ffmpeg -noaccurate_seek -y -f concat -i "$input" $maybe_junction -r $fps -an -filter_complex "$filter" -c:v $codec "$output"

nice -n $nice ffmpeg -noaccurate_seek -y -f concat -i "$input" $maybe_junction -r $fps -an -filter_complex "$filter" -c:v $codec "$output"
=======
filter="${filter}${additional_filters[G]}"

images_input=
if [ -n "$load_images" ]
then
  images_input=" -f image2 -framerate $fps"
  for im in $images
  do
    images_input="$images_input -i $im"
  done
fi

echo ffmpeg -noaccurate_seek -y -f concat -i "$input" $images_input -r $fps -an -filter_complex "$filter" -c:v $codec "$output"

nice -n $nice ffmpeg -noaccurate_seek -y -f concat -i "$input" $images_input -r $fps -an -filter_complex "$filter" -c:v $codec "$output"
>>>>>>> da9a4e1664613c42d7b5d51b330eb69b8185e919
