#!/bin/bash

# (c) Patryk Czarnik
# Distributed under MIT License. See LICENCE file in the root directory for details.

usage="vid-process [options] infile [infile...]
where options are:
  -h  -- prints usage message
  -o output_file -- sets output file
  -c width:height:left_offset:bottom_offset -- specification of the cropping rectangle, applied to the original input
  -r width:height -- final video size, to which the cropped image is resized
  -e width:height[:x:y] -- expands the size (after cropping and scaling); refer to mplayer docs for details
  -s expr -- speed (increased this many times); you can use expressions like 2002/1000
  -f number -- frames per second in the result
  -q quality -- integer value from 0 to 6; predefined settings of \"quality\",
     the higher, the better, but the conversion will take more time, and the resulting file will be bigger
  -B -- use the 'specified bitrate' policy when setting the quality
  -R -- use the 'crf' (constant rate factor, which in fact means constant perceived quality) policy; this is default.
  -b number -- assumed output bitrate to be passed to encoder
  -a number -- crf value; for x264 encoder use values between 1 (hihgest quality) and 50 (lowest quality); if unsusre, start with 20
  -g gamma -- applies gamma correction (e.g. 1.2); default: no correction
"

quality_driver="R"
gamma_strength=0.67

while getopts "ho:c:r:e:s:f:q:BRb:a:g:t:T:" opt; do
  case "$opt" in
  h|\?)
     echo "$usage"
     exit 1
     ;;
  o) output="$OPTARG"
     ;;
  c) crop="$OPTARG"
     ;;
  r) resize="$OPTARG"
     ;;
  e) expand="$OPTARG"
     ;;
  s) speed="$OPTARG"
     ;;
  f) fps="$OPTARG"
     ;;
  q) quality="$OPTARG"
     ;;
  B) quality_driver="B"
     ;;
  R) quality_driver="R"
     ;;
  b) bitrate="$OPTARG"
     ;;
  a) crf="$OPTARG"
     ;;
  g) gamma="$OPTARG"
     ;;
  t) start_time="$OPTARG"
     ;;
  T) end_time="$OPTARG"
     ;;
  esac
done

shift $(($OPTIND - 1))

if [ -z "$output" ]
then
output="out.avi"
fi

if [ $# -eq 0 ]
then
  echo "$usage"
  exit 1
fi

# Speed related options
speedopts=""
if [ -n "$speed" ]
then
speedopts="${speedopts} -speed $speed"
fi
if [ -n "$fps" ]
then
speedopts="${speedopts} -ofps $fps"
fi

# Fragment cutting options
timeopts=""
if [ -n "$start_time" ]
then
  timeopts="$timeopts -ss $start_time"
fi
if [ -n "$end_time" ]
then
  if [ -n "$start_time" ]
  then
    sta="$start_time"
  else
    sta=0
  fi
  if [ -n "$speed" ]
  then
    spe="$speed"
  else
    spe=1
  fi

  endpos=`echo "( $end_time - $sta ) / ( $spe )" | bc`

  timeopts="$timeopts -endpos $endpos"
fi



# Quality settings
# base_bitrate is the bitrate per each 100x100 pixels block
# The actual bitrate is computer proportionally to the field size of the image,
# plus $bitrate_constant_field (to slightly enhance the quality of smallest videos)
bitrate_constant_field=8

# Bitrate is specified for fps=30. If fps is differet,
# how much should it impact on the bitrate?
# 0.0 - no impact, 1.0 - bitrate is straightly proportional to fps.
# Practically, the values should be lower than 1.0.
bitrate_fps_impact=0.5

if [ -z "$quality" ]
then
quality=3
fi
case "$quality" in
  0)
    resize_settings=""
    sws=1
    denoise=""
    qopts1=""
    qopts2=":subq=1:frameref=2:me=dia:weightp=0"
    base_bitrate=16
    qcrf=32
  ;;
  1)
    resize_settings=":0:0:0:0.6"
    sws=6
    denoise="denoise3d=3:3:5:5"
    qopts1=""
    qopts2=":subq=4:frameref=3:me=hex"
    base_bitrate=25
    qcrf=30
  ;;
  2)
    resize_settings=":0:0:0.15:0.75"
    sws=2
    denoise="hqdn3d=2:3:4:5"
    qopts1=""
    qopts2=":subq=7:frameref=4:me=umh"
    base_bitrate=32
    qcrf=28
  ;;
  3)
    resize_settings=":0:0:6"
    sws=9
    denoise="denoise3d=2:3:4:4"
    qopts1=":subq=4:frameref=3:me=dia"
    qopts2=":subq=7:frameref=5:me=umh"
    base_bitrate=50
    qcrf=25
  ;;
  4)
    resize_settings=":0:0:6"
    sws=9
    denoise="hqdn3d=2:3:3:4"
    qopts1=":subq=4:frameref=3:me=dia"
    qopts2=":subq=8:frameref=5:me=umh"
    base_bitrate=60
    qcrf=23
  ;;
  5)
    resize_settings=":0:0:7"
    sws=9
    denoise="hqdn3d=2:3:3:4"
    qopts1=":subq=6:frameref=3:me=hex"
    qopts2=":subq=8:frameref=6:me=umh"
    base_bitrate=70
    qcrf=20
  ;;
  6)
    resize_settings=":0:0:7"
    sws=9
    denoise="hqdn3d=2:3:3:4"
    qopts1=":subq=6:frameref=3:me=hex"
    qopts2=":subq=8:frameref=6:me=umh"
    base_bitrate=75
    qcrf=18
  ;;
esac

if [ "$quality_driver" = "R" -a -z "$crf" ]
then
  crf="$qcrf"
fi

# setting default bitrate based on the quality and the size
if [ "$quality_driver" = "B" -a -z "$bitrate" -a -n "$resize" ]
then
  w=`echo $resize | cut -d : -f 1`
  h=`echo $resize | cut -d : -f 2`
  field=$(( $w * $h / 10000 ))
  bitrate=$(( $base_bitrate * ( $field + $bitrate_constant_field )))
  if [ -n "$fps" -a "$fps" -ne 30 ]
  then
    bitrate=`bc -l <<<  "(1.0 + $bitrate_fps_impact * ($fps - 30) / 30) * $bitrate"`
    bitrate=`echo $bitrate | cut -d . -f 1`
  fi
fi

if [ -z "$resize_settings" ]
then
resize_settings=":1:0:0.1:0.75"
fi

# Video filter flags
vf="softskip"
if [ -n "$crop" ]
then
vf="$vf,crop=$crop"
fi
if [ -n "$resize" ]
then
vf="$vf,scale=$resize$resize_settings"
fi
if [ -n "$expand" ]
then
vf="$vf,expand=$expand"
fi
if [ -n "$denoise" ]
then
vf="$vf,$denoise"
fi
if [ -n "$gamma" ]
then
vf="$vf,eq2=$gamma:1.0:0:1.0:$gamma:$gamma:$gamma:$gamma_strength"
fi

echo "Settings:"
echo " quality = $quality"
echo " crop = $crop"
echo " resize = $resize"
echo " expand = $expand"
echo " gamma = $gamma"
echo " fps = $fps"
echo " bitrate = $bitrate"
echo " crf = $crf"

if [ -z "$crf" -a -n "$qopts1" ]
then
  echo "PHASE 1"
  encopts1="pass=1${qopts1}"
  if [ -n $bitrate ]
  then
    encopts1="$encopts1:bitrate=${bitrate}"
  fi
  echo mencoder $speedopts $timeopts -vf "$vf" -sws "$sws" -ovc x264 -x264encopts "$encopts1" -nosound -o /dev/null "$@"
  nice -n 5 mencoder $speedopts $timeopts -vf "$vf" -sws "$sws" -ovc x264 -x264encopts "$encopts1" -nosound -o /dev/null "$@"
fi

echo "PHASE 2"
if [ -n "$encopts1" ]
then
  encopts2="pass=2${qopts2}"
else
  encopts2="${qopts2}"
fi
if [ -n ${bitrate} ]
then
  encopts2="$encopts2:bitrate=${bitrate}"
fi
if [ -n ${crf} ]
then
  encopts2="$encopts2:crf=${crf}"
fi
echo mencoder -quiet $speedopts $timeopts -vf "$vf" -sws "$sws" -ovc x264 -x264encopts "$encopts2" -forceidx -nosound -o "$output" "$@"
nice -n 5 mencoder -quiet $speedopts $timeopts -vf "$vf" -sws "$sws" -ovc x264 -x264encopts "$encopts2" -forceidx -nosound -o "$output" "$@"

echo "FINISHED"
