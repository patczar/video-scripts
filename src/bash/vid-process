#!/bin/bash

# (c) Patryk Czarnik
# Distributed under MIT License. See LICENCE file in the root directory for details.

usage="vid-process [options] infile [infile...]
where options are:
  -h  -- prints usage message
  -o output_file -- sets output file
  -c width:height:left_offset:bottom_offset -- specification of the cropping rectangle, applied to the original input
  -r width:height -- final video size, to which the cropped image is resized
  -s expr -- speed (increased thin many times); you can use expressions like 2002/1000
  -f number -- frames per second in the result
  -b number -- assumed output bitrate to be passed to encoder; values 2000-3000 give good results for 800x600 video size or similar; default is 2400
"

while getopts "ho:c:r:s:f:b:" opt; do
  case "$opt" in
  h|\?)
     echo "$usage"
     exit 1
     ;;
  o) output="$OPTARG"
     ;;
  c) crop="$OPTARG"
     ;;
  r) resize="$OPTARG"
     ;;
  s) speed="$OPTARG"
     ;;
  f) fps="$OPTARG"
     ;;
  b) bitrate="$OPTARG"
     ;;
  esac
done

shift $(($OPTIND - 1))

if [ -z "$output" ]
then
output="out.avi"
fi
if [ -z "$bitrate" ]
then
bitrate="2400"
fi

resize_settings=":1:0:0.1:0.75"
scale="${resize}${resize_settings}"
sws=2
denoise="hqdn3d=2:3:3:4"
eq="1.1"

if [ $# -eq 0 ]
then
  echo "$usage"
  exit 1
fi

# Speed related options
speedopts=""
if [ -n "$speed" ]
then
speedopts="${speedopts} -speed $speed"
fi
if [ -n "$fps" ]
then
speedopts="${speedopts} -ofps $fps"
fi


# Video filter flags
vf="softskip"
if [ -n "$crop" ]
then
vf="$vf,crop=$crop"
fi
if [ -n "$resize" ]
then
vf="$vf,scale=$resize$resize_settings"
fi
if [ -n "$denoise" ]
then
vf="$vf,$denoise"
fi
if [ -n "$eq" ]
then
vf="$vf,eq2=$eq"
fi


echo "PHASE 1"
mencoder $speedopts -vf "$vf" -sws "$sws" -ovc x264 -x264encopts bitrate=${bitrate}:subq=4:frameref=2:me=dia:pass=1 -nosound -o /dev/null "$@"

echo "PHASE 2"
mencoder $speedopts -vf "$vf" -sws "$sws" -ovc x264 -x264encopts bitrate=${bitrate}:subq=7:frameref=4:me=umh:pass=2 -forceidx -nosound -o "$output" "$@"

echo "FINISHED"
